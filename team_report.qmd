---
title: "{{< meta params.season >}} Team Report"
subtitle: "{{< meta params.team >}}"
format: html
params: 
    team: Wisconsin
    season: 2024
    echo: false
    warning: false
    message: false
---


```{r}

# packages
library(targets)
library(dplyr)
library(tidyr)
library(ggplot2)
library(quarto)
library(gt)
library(gtExtras)
library(patchwork)

# src code
tar_source("R")

# team info
team_info <- cfbfastR::cfbd_team_info(year = params$season)

# estimates
team_scores = tar_read("team_scores")
team_category_estimates = tar_read("season_team_category_estimates")
tar_load(adjusted_efficiency_overall_ppa)
tar_load(adjusted_efficiency_category_ppa)

```

# Season

```{r}

team_scores |>
  plot_team_score_by_season(team = params$team)
```

```{r}

team_scores |>
  plot_team_estimates_by_season(team = params$team)

```

```{r}

team_category_estimates |>
  plot_team_category_by_season(team = params$team)

```



```{r}

team_scores |>
  plot_team_by_season(team = params$team)
```


```{r}
# 
# plot_team_score_by_season = function(data) {
#   
#   data |>
#     find_team_season_score() |>
#     select(season, season_type, season_week, team, overall = score) |>
#     pivot_longer(cols = c(overall),
#                  names_to = c("type"),
#                  values_to = c("estimate")) |>
#     add_team_ranks() |>
#     plot_team_efficiency(teams = params$team)+
#     ylab("")+
#     xlab("Season")+
#     my_facet_theme()
#   
#   
# }

team_scores |>
  group_by(season, team) |>
  add_season_week() |>
  slice_max(week, n =1) |>
  rename(overall = score)  |> 
  ungroup() |> 
  select(season, season_type, season_week, team, overall) |>
  pivot_longer(cols = c(overall),
               names_to = c("type"),
               values_to = c("estimate")) |>
  add_team_ranks() |>
  plot_team_efficiency(teams = params$team)+
  ylab("")+
  xlab("Season")+
  my_facet_theme()+
  labs(title = paste("Team Overall Rating", params$team))


```

## Overall

## Pass/Run

```{r}

adjusted_efficiency_category_ppa |>
  add_overall_efficiency() |>
  add_team_ranks(groups = c("season", "type", "metric", "play_category")) |>
  filter(
    type %in% c("offense", "defense"),
    play_category %in% c("pass", "rush")
  ) |>
  plot_team_efficiency(teams = params$team) +
  facet_grid(play_category ~ type)+
  scale_x_discrete(breaks = scales::pretty_breaks(n=8))

```


```{r}


team_category_estimates |>
  plot_team_category_by_season(team = params$team)

```


```{r}

adjusted_efficiency_category_ppa |>
  filter(play_category != 'special') |>
  team_efficiency_category_tbl(team = params$team) |>
  gt::opt_interactive(page_size_default = 15)

```

# Weekly

## Overall

```{r}

team_scores |>
  plot_team_scores(team = params$team, rankings = c(25))
```

```{r}

team_scores |>
  filter(season >= 2018) |>
  plot_team_scores(team = params$team, rankings = c(25))

```

## Pass/Run

```{r}

team_category_estimates |>
  plot_team_efficiency_by_category_and_week(team = params$team)

```

```{r}

team_category_estimates |>
  filter(season >= 2018) |>
  plot_team_efficiency_by_category_and_week(team = params$team)
```


```{r}

team_category_estimates |> 
  find_team_season_score() |>
  filter(play_category != 'special') |>
  team_efficiency_category_tbl(team = params$team) 
# |>
#   gt::opt_interactive(page_size_default = 25) |>
#   add_gt_formatting()
                               
```